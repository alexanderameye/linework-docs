{"about-linework":{"title":"About Linework","links":["getting-started","common-questions","support/roadmap","support/troubleshooting-and-known-limitations"],"tags":[],"content":"Thank you for your interest in Linework!\nYou have already downloaded Linework and want to get started? Read the Getting Started section.\nYou can get Linework from the asset store here\nassetstore.unity.com/packages/slug/294140.\n\n\n\n                  \n                  Linework for Unity - A Practical Toolkit for Rendering Outlines \n                  \n                \n\nWith Linework you can render high-quality outlines in Unity. Multiple techniques can be used, balancing visual quality and performance. Both full-screen outlines (for outlined art-styles) as per-object outlines are supported. You can also combine outlines with fill effects such as patterns and overlays. The toolkit is designed to be feature-rich and straightforward to use.\n\n\nUseful Links\nAsset Store: assetstore.unity.com/packages/slug/294140\nDiscord: discord.gg/cFfQGzQdPn\nGetting Started | Common Questions | Roadmap | Troubleshooting and Known Limitations"},"common-questions":{"title":"Common Questions","links":["support/compatibility"],"tags":[],"content":"Frequently asked questions.\n\n\n                  \n                  How is Linework different from other outline assets? \n                  \n                \n\n5+ years in the making, Linework is the culmination of years of experimentation that I have done with outline rendering in Unity.\nThe strength of Linework is that it combines the following important features in a single, easy-to-use package.\n\nMultiple techniques. There is no one-size-fits-all solution for outlines. Linework includes multiple techniques, balancing visual fidelity and performance.\nPerformant. Leveraging the power of the SRP batcher, Linework is able to render multiple outlines within a single batch.\nEasy to use. A considerable amount of development time has gone into finetuning the user experience for Linework so that is is user-friendly while still being flexible.\n\nBy combining these 3 core focus points, Linework thrives to be the one-stop solution for rendering outlines in Unity.\n\n\n\n\n                  \n                  Does Linework support X/Y/X? \n                  \n                \n\nLinework is only compatible with Unity 6 or Unity 2022.3 and the Universal Render Pipeline. Other combinations are not supported. See Compatibility for more detailed information.\n\n"},"concepts-explained/occlusion-states":{"title":"Occlusion States","links":[],"tags":[],"content":"The Render setting for outlines and fills usually has 3 options.\nRender Always\nAlways render the outline/fill, regardless of its occlusion state in the scene.\n\nRender When Not Occluded\nOnly render the outline/fill when it is not occluded (not hidden behind other geometry).\n\nRender When Occluded\nOnly render the outline/fill when it is occluded (hidden behind other geometry).\n\n\n\n                  \n                  Occlusion State Options + Bleeding \n                  \n                \n\nDue to technical limitations, not all outline types support all 3 Occlusion State options.\n\n\nThe Fast Outline and Surface Fill effects support the different occlusion states the best.\n\n\nThe Soft Outline and Wide Outline effects may display bleeding due to these effects rendering in screen-space.\n\n\n\nThe Edge Detection effect does not support occlusion states.\n\n\n\n"},"concepts-explained/outline-bleeding":{"title":"Outline Bleeding","links":["1-projects/linework/docs/outlines/soft-outline","1-projects/linework/docs/outlines/wide-outline"],"tags":[],"content":"Issue\nFor the Soft Outline and Wide Outline outline effects, the outlines are rendered by having a silhouette that is dilated in screen-space. Because of the screen-space nature of this effect, the outline will not always completely respect the configured Occlusion State. This is especially apparent for wide outlines.\nIn the example below, the outline is set to render When Not Occluded however the outline bleeds slightly over the other object in the scene.\n\nSolutions\nThere are 2 solutions that may help with the bleeding effect.\nTransparent Outline\nYou can add an additional outline that is set to render When Occluded and set the transparency of the color to 0%.\n\nThis will make it so the outline is hidden where it needs to be. The downside of this method is that for the Wide Outline, it might over-correct and a little part of the outline is occluded where it shouldn’t be.\n\nDue to the dilation step, this solution does not work for the Soft Outline.\nRender As Mask\nA second method is to mask out parts of the outline by assigning objects to render As Mask which will effectively mask out the outline. In the example below, the box is set to render As Mask and the outline is then occluded.\n\nThis method works well for both the Soft Outline and the Wide Outline.\n"},"concepts-explained/rendering-layer-masks":{"title":"Rendering Layer Masks","links":[],"tags":[],"content":"All outline and fill effects make use of the Rendering Layer Mask system in Unity to control which objects should receive an outline. Using this system you gain a lot of flexibility to define which objects receive which outlines.\nAs an example, you could have a Default Rendering Layer and an Enemy Rendering Layer. All objects that should have an outline can then get added to the Default Rendering Layer and a yellow outline could be assigned to that rendering layer. Objects that are in a temporary Enemy State could then be temporarily added (by script) to the Enemy Rendering Layer and a red, striped fill effect could be assigned to that rendering layer.\n\nTo get started with setting up a rendering layer, you can follow these steps.\n1. Create a Rendering Layer\nGo to Project Settings &gt; Tags and Layers. In here, add a layer (or replace one of the Light Layers if you are not making use of them).\n\n2. Add an object to a Rendering Layer\nGo to the Mesh Renderer of the object that you want the outline applied to, and under Additional Settings &gt; Rendering Layer Mask, select the rendering layer that you just created.\n\n3. Assign an outline/fill to a Rendering Layer\nIn your render effect (outline or fill) you will find the Layer setting. In here, select all of the rendering layers for which the outline/fill should be applied.\n\n\n\n                  \n                  Performance Implications \n                  \n                \n\nBe sure to read the Unity documentation on Rendering Layers. Especially the section on Performance is relevant.\ndocs.unity3d.com/Packages/com.unity.render-pipelines.universal@17.0/manual/features/rendering-layers.html#performance\n\n"},"features/2d-and-sprites":{"title":"2D and Sprites","links":[],"tags":[],"content":"Linework currently does not work with the 2D renderer or sprites. If you would like this feature, you can give it an upvote on the Discord under Feature Requests.\ndiscord.com/channels/1275768127782916168/1302909298417864748"},"features/alpha-cutout":{"title":"Alpha Cutout","links":[],"tags":[],"content":"Linework supports alpha cutout shaders for Wide Outline and Soft Outline. Other outline types are not currently supported.\nHow to enable alpha cutout?\nTo enable alpha cutout for an outline, enable the Alpha Cutout toggle and specify the alpha cutout Texture that should be used. The outline will then be clipped according to the texture.\n\nKeep note that the same alpha cutout texture will be used for all outlined gameobjects on the specified layer (Light Layer 1 in this case).\nWhat if I have many different alpha cutout textures?\nA possible use case is that you have multiple meshes with different alpha cutout textures that all should have the same outline visual. In this case, you would use the same outline layer so that the color is shared between all those meshes.\nIn the case that you have multiple alpha cutout textures, enable the Alpha Cutout toggle but leave the Texture field empty. Instead, add the following script to each mesh renderer that has alpha cutout enabled for it.\nusing UnityEngine;  \n  \npublic class AlphaCutout : MonoBehaviour  \n{  \n    private static readonly int AlphaCutoutTexture = Shader.PropertyToID(&quot;_AlphaCutoutTexture&quot;);  \n    private MaterialPropertyBlock propertyBlock;  \n  \n    private void OnValidate()  \n    {        \n\t    propertyBlock ??= new MaterialPropertyBlock();  \n        var rend = GetComponentInChildren&lt;Renderer&gt;();  \n\t    propertyBlock.SetTexture(AlphaCutoutTexture,\n\t    rend.sharedMaterial.mainTexture);  \n        rend.SetPropertyBlock(propertyBlock);  \n    }\n}\n\nThis process will be improved in the future. Check the feature-requests channel in the Discord for progress on this."},"features/gpu-instancing":{"title":"GPU Instancing","links":[],"tags":[],"content":"// coming 1.3.0"},"features/world-space-ui":{"title":"World Space UI","links":[],"tags":[],"content":"If you are using world space UI together with Linework, you might bump into some issues where the outlines are shown on top of the UI.\nThis occurs because the world space UI uses a shader that does not write to the depth buffer. Because of this, the outlines can not ‘detect’ the world space UI and can not render behind the UI by checking the depth buffer.\nRender Before Transparents\nThe solution for this is to make sure the outlines render before the UI does.\n\nTo enable this injection point, open RenderUtils.cs and add this to the InjectionPoint enum.\n[InspectorName(&quot;Before Transparents&quot;)]\nBeforeRenderingTransparents = RenderPassEvent.BeforeRenderingTransparents,\n\nIn a future update this will be added so you don’t have to add it manually.\nThis will make it so the outlines are rendered before the UI and so the UI renders on top of the outlines (white square is UI image here).\n\nZWrite in UI shader\nAn alternative is to modify the UI shader so that it writes to the depth buffer. Then the outlines can take the world space UI into account.\nHowever, I’m not sure if adding ZWrite On to the UI shader could have some unexpected side effects so keep that in mind\n"},"getting-started":{"title":"Getting Started","links":["support/compatibility","support/troubleshooting-and-known-limitations","support/contact","concepts-explained/rendering-layer-masks","outlines/fast-outline","outlines/soft-outline","outlines/wide-outline","outlines/edge-detection","outlines/surface-fill"],"tags":[],"content":"How to get started using Linework.\nBefore using Linework, review the following important notes.\n\n\n                  \n                  License Agreement \n                  \n                \n\nThe source code included with this asset can be freely modified to suit your needs. However, please adhere to the following restrictions:\n\nDo not upload the source code to any public repository (e.g., GitHub). You may omit the files or keep the repository private.\nDo not use any part of this source code in new or existing publications on the Asset Store.\nDo not resell the source code or the compiled version of it, either in full or in part. You can include the compiled version of the source code as an integrated component of your game.\n\nRedistribution of Linework is not allowed. If you obtained a copy through other channels than the Asset Store, please respect my work of developing/maintaining Linework by purchasing a legitimate copy from the Asset Store.\nassetstore.unity.com/packages/vfx/shaders/linework-294140\n\n\nInstallation\nLet’s get started.\n\n\n                  \n                  Compatibility Check \n                  \n                \n\nBefore installing, carefully review the Compatibility section to verify that Linework will work with your project.\n\n\nAfter importing the asset into Unity, open up the compatibility check window. You can open it by clicking Window &gt; Linework &gt; Compatibility. Click on Check Compatibility and see if all checkmarks are green. If not, you can click on any of them to see why the checkmark is not green.\n\nIf the result is showing only green checkmarks, you are good to go! If not, see the Troubleshooting and Known Limitations section or Contact me.\nAdding Outlines and Fills\nTo get started, open the Universal Renderer Data asset, click on Add Renderer Feature and select the outline/fill effect that you would like to add. Each outline effect stores its settings in a separate object that you can create somewhere in your Assets folder. You can use the Create button to create these settings automatically. After creating them, make sure they are assigned in the settings slot in the inspector!\n\nAlternatively, you can create the settings manually by right-clicking in the project window and selecting Create &gt; Linework &gt; Outline Settings. After, drag the created settings into the object slot of the renderer feature.\n\nYou can now click the Open button to open the settings.\n\nNext, click on Add Outline to add an outline. By default, the outline should be applied to the whole scene. See Rendering Layer Masks for information about how the outline layer system works.\nDepending on which outline/fill effect you are using, you can find more detailed information about the different configuration options here.\n\nFast Outline\nSoft Outline\nWide Outline\nEdge Detection\nSurface Fill"},"how-do-i-...-/change-outline-visuals-at-runtime":{"title":"Change outline visuals at runtime","links":[],"tags":[],"content":"Changing outline visuals at runtime is a common use case. For example, you might want to fade an outline in/out or change the width of the outline during the game.\nBelow you will find some example code that shows how you can do this.\nThe main thing is that you set a reference to your outline settings (FastOutlineSettings, SoftOutlineSettings, WideOutlineSettings, EdgeDetectionSettings or SurfaceFillSettings). Then, you have access to the outlines and their properties which you can modify.\nThe script below changes the color of the Wide Outline to a random whenever the spacebar is pressed.\nusing Linework.WideOutline;  \nusing UnityEngine;  \n  \npublic class ChangeOutline : MonoBehaviour  \n{  \n    [SerializeField] private WideOutlineSettings wideOutlineSettings;  \n  \n    private void Update()  \n    {        \n\t    if (Input.GetKeyDown(KeyCode.Space))  \n        {            \n\t        var color = new Color(\n\t        Random.Range(0.0f, 1.0f), \n\t        Random.Range(0.0f, 1.0f), \n\t        Random.Range(0.0f, 1.0f)\n\t        );  \n\t        \n\t        wideOutlineSettings.Outlines[0].color = color;\n        }    \n\t}\n}\n"},"how-do-i-...-/enable-an-outline-on-mouse-hover-or-click":{"title":"Enable an outline on mouse hover or click","links":[],"tags":[],"content":"Enabling an outline around an object when hovering over it or when clicking it is a common use case. Below you will find some example code that shows how you can implement this.\nPrerequisites\nBefore using the script, there are a few prerequisites before being able to interact with the scene. Check the list below if you meet every requirement.\n\n\n                  \n                  Checklist \n                  \n                \n\n1. Event System\nMake sure there is an EventSystem in your scene. If not, Create &gt; UI &gt; Event System.\n2. Physics Raycaster\nMake sure that your camera has a Physics Raycaster component added to it.\n\n\n\nSteps\n\nAdd the script to any object that you want to outline. (! object should have a collider !)\n\n\n\nSelect the Outline Layer in the inspector to be the same as the Layer that you have configured for the outline.\n\n\nScript\nThe core functionality of the script below is changing the rendering layer of the selected object’s Mesh Renderer to be the one that the outline is activated for.\nUsing the Activate option, you can switch between activating the outline On Hover or On Click.\nusing UnityEngine;  \nusing UnityEngine.EventSystems;  \n// using Linework.Common.Attributes; // unity 2022\n  \npublic class Outline : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerClickHandler  \n{  \n    [SerializeField] private RenderingLayerMask outlineLayer; // unity 6\n    // [SerializeField] [RenderingLayerMask] private int outlineLayer; // unity 2022\n    [SerializeField] private Activate activate = Activate.OnHover;  \n  \n    private Renderer[] renderers;  \n    private uint originalLayer;  \n    private bool isOutlineActive;  \n  \n    private enum Activate  \n    {  \n        OnHover,  \n        OnClick  \n    }  \n  \n    private void Start()  \n    {        \n\t    renderers = TryGetComponent&lt;Renderer&gt;(out var meshRenderer)  \n            ? new[] {meshRenderer}  \n            : GetComponentsInChildren&lt;Renderer&gt;();  \n        originalLayer = renderers[0].renderingLayerMask;  \n    }  \n    \n    public void OnPointerEnter(PointerEventData eventData)  \n    {        \n\t    if (activate != Activate.OnHover) return;  \n        SetOutline(true);  \n    }  \n    \n    public void OnPointerExit(PointerEventData eventData)  \n    {        \n\t    if (activate != Activate.OnHover) return;  \n        SetOutline(false);  \n    }    \n    \n    public void OnPointerClick(PointerEventData eventData)  \n    {        \n\t    if (activate != Activate.OnClick) return;  \n        isOutlineActive = !isOutlineActive;  \n        SetOutline(isOutlineActive);  \n    }    \n    \n    private void SetOutline(bool enable)  \n    {        \n\t    foreach (var rend in renderers)  \n        {            \n\t\t    // unity 6\n\t        rend.renderingLayerMask = enable \n\t        ? originalLayer | outlineLayer \n\t        : originalLayer;  \n\n\t\t\t// unity 2022\n\t\t\t// rend.renderingLayerMask = enable \n\t        // ? originalLayer | 1u &lt;&lt; outlineLayer - 1 \n\t        // : originalLayer;  \n        }    \n\t}\n}\n\nIssues?\n\ncheck the checklist with requirements above\ncheck if a collider may be obscuring your selectable game object\nif the collider on the selectable object is a trigger, verify that Queries Hit Triggers is enabled in the physics settings\ncheck Raycaster Event Mask vs gameobject’s layer mask\n"},"outlines/edge-detection":{"title":"Edge Detection","links":["support/contact"],"tags":[],"content":"Edge Detection renders outlines by detecting edges and discontinuities within the scene, such as differences in depth, normal vector, color, or custom input buffers. This process creates a consistent outline effect that is applied uniformly across the entire scene, making it suitable for both external and internal object boundaries.\n\n\n\n                  \n                  Advantages \n                  \n                \n\n\nConsistent Outline: As a screen-space effect, the outline is uniformly applied across the whole scene, ensuring a consistent look.\nInner Lines: The effect is able to capture both internal lines as lines on the outside of objects.\n\n\n\n\n\n                  \n                  Disadvantages \n                  \n                \n\n\nObject Exclusion: It’s challenging to exclude specific objects or customize the outline effect for individual objects.\nPerformance: This is a screen-space effect that runs for the whole screen.\n\n\n\nConfiguration\nThe Edge Detection Settings object contains the settings related to this outline effect. Here are all of the settings explained. In Unity, each setting also has a tooltip which shows more information.\nGeneral Settings\nThe general settings apply to the outline effect as a whole.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationStageControls when the render pass executes.Show In Scene ViewSets whether to render the pass in the scene view.DebugWhich stage to render as a debug view.\nDiscontinuity Settings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationSourcesWhich inputs to use as discontinuity sources for the edge detection.See the Discontinuity Sources section below for more information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting (Depth)DescriptionAdditional InformationSensitivityThe sensitivity used to detect the discontinuity in depth.Distance MaskAdjust how sensitive the edge detection is to changes in depth based on the distance from the camera.Sharp Angle MaskHelps prevent edges from being falsely detected when the camera views a surface at a shallow angle.Sharp Angle Mask MultiplierHelps prevent edges from being falsely detected when the camera views a surface at a shallow angle.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting (Normals)DescriptionAdditional InformationSensitivityThe sensitivity used to detect the discontinuity in normal vector.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting (Luminance)DescriptionAdditional InformationSensitivityThe sensitivity used to detect the discontinuity in luminance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting (Section Map)DescriptionAdditional InformationLayerThe rendering layer(s) which will get rendered to the section map.Object IDWhether to render each object with a unique ID to the section map.InputThe additional input used for the section map.ChannelWhich vertex color channel to render to the section map.TextureWhich texture to sample when rendering to the section map.UV SetWhich UV set to use when sampling the section texture.KeywordWhich keyword to enable during the rendering of the section map.ShaderWhich shader to use to render to the section map.\nOutline Settings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationKernelThe kernel that is used to detect edges.WidthThe width of the outline.ColorThe color of the outline.Override ShadowThe color of the outline when it is in an area that lies within a shadow.Fill ColorThe color of the outline for fill in regions in the section map.BlendHow to blend the outline with the rest of the scene.\nDiscontinuity Sources\nThe Edge Detection effect is able to use a combination of discontinuity sources to determine where a line should be drawn.\nGiven a scene, a combination of the following discontinuity sources may be used.\nDepth\nThe depth of each fragment in the scene. Works well to get the silhouettes of objects.\n\nNormals\nThe orientation of each fragment in the scene. Works well to get fine details in objects if they have a different orientation.\n\nLuminance\nThe luminance of each fragment in the scene. Works well to pick up on differences in color/brightness between surfaces, even if they have the same orientation.\n\nCombined\nBy combining depth, normals and luminance, the outlines come out like this.\n\nSection Map (Advanced Usage)\n\n\n                  \n                  Advanced Usage \n                  \n                \n\nThe Section Map is a powerful feature that may be used for rendering outlines. However, be sure that you read the documentation carefully. If things do not work out of the box or you have questions, Contact me. Thanks!\n\n\n\n\n                  \n                  Section Map \n                  \n                \n\nThe Section Map is a special texture that is generated during the rendering process and used by the edge detection shader to determine where to draw edges. The section map uses only the R channel. Additionaly, there are 2 special values that the section map may have.\n0.0 = mask → no lines will be drawn\n1.0 = fill → a special Fill Color will be drawn\nWhen using Vertex Colors or a Section Texture as explained below, be sure to note that values of 0 will be used as a mask, and values of 1 will be used as a fill.\n\n\nThe Section Map allows us to introduce additional information for the edge detection shader to use, without adding additional geometry. Some examples:\nObject ID\nEach object is rendered to the Section Map using an unique ID. Works well to render outlines between objects. No manual control is possible, everything is generated based on world position.\n  \nVertex Colors\nThe vertex colors of an object may be rendered to the section map. This gives nearly complete control over outlines. The only limitation is that the necessary geometry needs to be present in order to paint it. This method is able to generate very clean outlines. As explained above, be sure to note that values of 0 will be used as a mask, and values of 1 will be used as a fill.\n \nSection Texture\nIn this mode, a dedicated Section Texture is sampled and used to render to the section map. This gives very fine control over outlines. Again, keep in mind that a value of 0.0 = mask and 1.0 = fill.\nIn the settings of the Section Map you can choose\n\nThe Section Texture that will be sampled.\nThe UV Set that will be used to sample the texture. This allows you to have a different UV set specifically for your section texture.\nThe Channel that will be sampled.\n\n\nWithin the package, there is a section_texture.png which is recommended for you to use. It contains a 4x4 palette in tints of red. The bottom left value is 0.0 = mask and the top left is 1.0 = fill.\n\nIn your 3D modelling program, you can set up a secondary UV map.\n\nYou can then UV map your mesh so that surfaces that should have an edge between, have a different color in the palette.\n\nThen in Unity you can choose which UV set to use.\nAs explained above, be sure to note that values of 0 will be used as a mask, and values of 1 will be used as a fill.\n \nThe Section Texture method involves a bit more work than the Vertex Colors method.\nKeyword\nThe Keyword method is yet another technique to render to the section map. Before rendering to the section map, the _SECTION_PASS keyword is enabled. After, the keyword is disabled again. This makes it possible to add a _SECTION_PASS switch at the end of your shaders so you can output whatever you want to the section map.\nIn the example below I output a pattern of stripes.\n\nThis gives us the following section map and result.\n \nAs explained above, be sure to note that values of 0 will be used as a mask, and values of 1 will be used as a fill.\nThe Keyword method leaves everything to you. You can output anything you want, irregardless of the geometry of your mesh.\nWhat option to choose?\nLet’s summarize all the options of outputting to the section map.\nVertex Color: Easiest to use. You could make/use tools that randomly assign a color to a face.\n\n\n                  \n                  Vertex Color Tooling \n                  \n                \n\nYou could use something like IDMapper (I have not tested this personally!) to make it easier to assign vertex colors quickly\nIDMapper - Blender Market\n\n\nSection Texture: More setup involved since you need to make a secondary UV map. This also requires you to come up without some kind of method/system so that faces next to each other, don’t use the same color.\nKeyword: Use this if you have very specific needs of certain patterns that should be shown, independent of the geometry of your mesh.\nAnti-aliasing\nTODO:  check “MSAA will not apply to the edges, since the depth texture is remains aliased. Post processing AA methods do have an effect.”\nTODO: check “An edge has a minimum thickness of 1 pixel. This means at lower resolutions, edges will appear thicker. For instance, in the scene-view window”"},"outlines/fast-outline":{"title":"Fast Outline","links":["support/performance","concepts-explained/rendering-layer-masks","concepts-explained/occlusion-states"],"tags":[],"content":"Fast Outline renders outlines by rendering an extruded version of an object behind the original object.\n\n\n\n                  \n                  Advantages \n                  \n                \n\n\nPerformance: Not a screen-space effect, just re-renders the object with a simple shader.\nObject Exclusion: Easily select which specific objects should receive an outline.\nMultiple Styles: Different objects can have completely different outline styles.\n\n\n\n\n\n                  \n                  Disadvantages \n                  \n                \n\n\nInner Lines: No inner lines are rendered. Only outlines.\nArtifacts: This method may produce artifacts (inconsistent line widths, gaps). These issues may be mitigated. See more information below in the Artifacts section.\n\n\n\nConfiguration\nThe Fast Outline Settings object contains the settings related to this outline effect. Here are all of the settings explained. In Unity, each setting also has a tooltip which shows more information.\nGeneral Settings\nThe general settings apply to the outline effect as a whole (with all sub-outlines included).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationStageControls when the render pass executes.Show In Scene ViewSets whether to render the pass in the scene view.Force Clear StencilForce clear the stencil buffer after the render pass.Should normally not be enabled, but can be used if you notice unexpected interactions between different effects.\nOutline Settings\nTo add an outline, click on the Add Outline button. This will add an outline to the list. You can add as many outlines as you want. See the Performance section for more information about the impact of adding outlines.\n\nEach outline in the list is applied to objects that belong to the specified Rendering Layer Mask. See Rendering Layer Masks for more information about how the layer system works.\nThe outline settings apply to a specific outline.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationLayerThe rendering layer(s) which will get an outline rendered for them.See Rendering Layer Masks for more information.RenderFor which occlusion states to render the outline.See Occlusion States for more information.BlendHow to blend the outline with the rest of the scene.MaskThe masking strategy that is used to only show the outline where needed.ColorThe color of the outline.Occluded ColorThe color of the outline when it is occluded.MethodThe vertex extrusion method that is used.ScalingHow to scale the width of the outline.WidthThe width of the outline.Min WidthThe minimum width of the outline.\nVertex Extrusion Methods\nThe Fast Outline effect renders outlines by rendering an extruded version of a mesh. There are 8 different options available that control how the mesh is extruded.\nEach option below is shown in an extreme way with an big outline width. For a lot of methods, bigger widths will result in an outline with gaps.\nVertex Position (OS)\nMove each vertex along the vertex position in object space.\n\nNormalized Vertex Position (OS)\nMove each vertex along the normalized vertex position in object space.\n\nNormal Vector (OS)\nMove each vertex along the normal vector in object space.\n\nVertex Color (OS)\nMove each vertex along the vertex color in object space.\nNormal Vector (CS)\nMove each vertex along the normal vector in clip space.\n\nNormal Vector (SS)\nMove each vertex along the normal in screen space.\n\nNormal Vector (WS)\nMove each vertex along the normal in world space.\n\nBaked Direction UV8 (OS)\nMove each vertex along the direction extracted from the UV8 channel in object space.\nScaling\nThe Fast Outline supports 2 methods of scaling the outline. Either the outline has a consistent screen-space width, or it is scaled by distance. The main difference will be when zooming out, when the object that is outline takes up a small space of the scene.\nConstant\nThe outlines will always take up the same width in terms of screen-space pixels. When zooming out, this may become disproportionally large compared to the smaller object it is outlining.\nScale With Distance\nThe outlines will be reduced in size while zooming out. This will keep the outline the same size relative to the object it is outlining. You can also set a Minimum Width to keep the outlines from becoming so small that you can no longer see them.\nArtifacts\nThe Fast Outline effect renders outlines by rendering an extruded version of a mesh. This extrusion step may show some artifacts. The reason is that each vertex of the mesh is moved in a certain direction in 3D space, but with different vertices moving in different directions, this may introduce gaps or sharp edges in the extruded mesh. The artifacts may be especially noticeable on meshes with sharp edges. There are several ways to mitigate these issues.\n\nExtrusion method: Try using a different extrusion method in the outline settings. Some extrusion methods may produce better results in your case.\nNormal vector smoothing: In your 3D modelling software you could smooth the normal vectors of your mesh. This should produce a smoother outline as well. If you don’t want to directly smooth the normal vectors of your mesh, you could store a smoothed version of the normal vectors in the vertex colours and use the Vertex Color Extrusion method in the outline settings.\n\nLimitations\nThere are some known limitations that come with the implementation of the Fast Outline effect."},"outlines/soft-outline":{"title":"Soft Outline","links":["support/performance","concepts-explained/rendering-layer-masks","concepts-explained/occlusion-states","concepts-explained/outline-bleeding"],"tags":[],"content":"Soft Outline renders outlines by generating a silhouette of an object and applying a dilation/blur effect, resulting in smooth, soft-edged contours around objects.\n\n\n\n                  \n                  Advantages \n                  \n                \n\n\nSoft Edges: Good for rendering soft/glowy outlines, but also supports solid outlines.\nObject Exclusion: Easily select which specific objects should receive an outline.\n\n\n\n\n\n                  \n                  Disadvantages \n                  \n                \n\n\nInner Lines: No inner lines are rendered. Only outlines.\nPerformance: Expensive to get wide outlines due to the screen-space blur/dilation that happens.\nMultiple Styles: All outlined objects in the scene will share the same thickness as well as some other settings.\n\n\n\nConfiguration\nThe Soft Outline Settings object contains the settings related to this outline effect. Here are all of the settings explained. In Unity, each setting also has a tooltip which shows more information.\nGeneral Settings\nThe general settings apply to the outline effect as a whole (with all sub-outlines included).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationStageControls when the render pass executes.Show In Scene ViewSets whether to render the pass in the scene view.Force Clear StencilForce clear the stencil buffer after the render pass.Should normally not be enabled, but can be used if you notice unexpected interactions between different effects.DebugWhich stage to render as a debug view.\nShared Outline Settings\nSome settings related to the visuals of the outline are shared between all outlines. This is because Soft Outline is a screen-space effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationBlendHow to blend the outline with the rest of the scene.TypeWhether to render a soft or a hard outline.ColorThe color of the outline.HardnessThe hardness of the outline.IntensityThe intensity of the outline.MethodThe method used to dilate the outline.WidthThe width of the outline.SpreadThe spread of the Gaussian kernel (Gaussian Blur).PassesHow many blur passes to perform (Kawase Blur).\nOutline Settings\nTo add an outline, click on the Add Outline button. This will add an outline to the list. You can add as many outlines as you want. See the Performance section for more information about the impact of adding outlines.\n\nEach outline in the list is applied to objects that belong to the specified Rendering Layer Mask. See Rendering Layer Masks for more information about how the layer system works.\nThe outline settings apply to a specific outline.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationLayerThe rendering layer(s) which will get an outline rendered for them.See Rendering Layer Masks for more information.RenderFor which occlusion states to render the outline.See Occlusion States for more information.Closed LoopWhether to render a closed loop outline.ColorThe color of the outline.\nOutline Type\nThe Soft Outline effect supports both a soft and a hard outline type.\nSoft: A soft and glowy outline that fades out towards the edges. Supports multiple colors.\nHard: A hard outline where the alpha is cut off at a certain threshold. Supports a single, shared color.\n \n\n\n                  \n                  Hard Outline = Shared Color \n                  \n                \n\nWhen using the Hard outline option, the color is shared between all outlines in the list. If you need multiple Hard outlines with different colors, you can use multiple Soft Outline effects, but this will have an effect on Performance. Contact me if you have additional questions about this.\n\n\nDilation Method\nThe Soft Outline effect renders outlines by generating a silhouette of an object and applying a dilation/blur effect. There are several options available to control how the silhouette is dilated.\nBox\nA box blur is applied. Controlled through a Width parameter.\n\nGaussian\nA Gaussian blur is applied. Has an additional Spread parameter. Results in smoother outlines at a slight performance cost.\n\nKawase\nA Kawase blur is applied.\n\nDilate\nA dilation effect is applied.\n\nClosed Loop\nThe Soft Outline effect has a Closed Loop option. This option is only available when the When Not Occluded render option is selected.\nIt results in the outline being a single closed loop.\n\nLimitations\nThere are some known limitations that come with the implementation of the Soft Outline effect.\n\n\n                  \n                  Hard Outline Color \n                  \n                \n\nWhen using the Hard outline type, the color of the outline is shared between all outlines.\n\n\n\n\n                  \n                  Outline Bleeding \n                  \n                \n\nBecause the silhouette is dilated in screen-space, the outline will not always completely respect the configured Occlusion State. This is especially apparent for wide outlines.\nIn the example below, the outline is set to render When Not Occluded however the outline bleeds slightly over the other object in the scene.\n\nSee Outline Bleeding for ways to resolve this.\n\n\n\n\n                  \n                  Overlapping Effects \n                  \n                \n\nIf 2 outlined objects overlap in the scene, the interaction of the outlines might not always be what you expected. The reason is that all objects render to the same silhouette buffer, which is then blurred a single time (for performance reasons) and also sampled a single time.\nFor example, the following 2 outlines are set to render Always, yet they are broken up at the intersection and so not in fact rendering always.\n\nAnother example is these 2 outlines that are set to render When Occluded. However, the outlines never rendered.\n\nThis limitation is present because the objects share the same silhouette that is then blurred. To get around these issues, each outline should have its own silhouette that is then blurred separately, which is prohibitively expensive.\n\n\nPerformance\nSoft outline works by generating a silhouette of an object and applying a dilation/blur effect. The result is a smooth, soft-edged contour. However, due to the screen-space dilation/blur, there is a performance impact. Soft outline comes with 4 dilation methods, each working a different way and having a different performance impact.\nBox Blur\nPerforms a two-pass blur on the silhouette, once vertical and once horizontal. This blur works by taking multiple samples around a center sample, and averaging the result.\nFor each blur pass (2 in total), the silhouette texture is sampled outlineWidth * 2 + 1 times. For example, if the outlineWidth is equal to 2 then the silhouette texture is sampled 2 * 2 + 1 = 5 times. This means that the performance cost of this shader increases linearly with the outline width.\nFor each sample, the weight of the sample is simply 1 / number of samples and so does not need to be calculated.\nGaussian Blur\nPerforms a two-pass blur on the silhouette, once vertical and once horizontal. This blur works by taking multiple samples around a center sample, and averaging the result, weighted according to a Gaussian distribution around the center pixel\nFor each blur pass (2 in total), the silhouette texture is sampled outlineWidth * 2 + 1 times. For example, if the outlineWidth is equal to 2 then the silhouette texture is sampled 2 * 2 + 1 = 5 times. This means that the performance cost of this shader increases linearly with the outline width.\nAdditionally, for each sample, the weight of the sample is calculated.\nKawase Blur\nPerforms a multi-pass blur on the silhouette. This blur works by taking 5 texture samples in total for each pass. Increasing the outline width, does not influence the number of samples taken, but instead increases the number of passes.\nFor example, if the number of passes is set to 3 in the settings, then 3 * 5 = 15 texture samples will be executed.\nThis means that the performance cost of this shader increases linearly with the outline width."},"outlines/surface-fill":{"title":"Surface Fill","links":["support/performance","concepts-explained/rendering-layer-masks","concepts-explained/occlusion-states"],"tags":[],"content":"Surface Fill renders fills by rendering an object with a fill material.\n\nConfiguration\nThe Surface Fill Settings object contains the settings related to this fill effect. Here are all of the settings explained. In Unity, each setting also has a tooltip which shows more information.\nGeneral Settings\nThe general settings apply to the fill effect as a whole (with all sub-fills included).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationStageControls when the render pass executes.Show In Scene ViewSets whether to render the pass in the scene view.Force Clear StencilForce clear the stencil buffer after the render pass.Should normally not be enabled, but can be used if you notice unexpected interactions between different effects.\nFill Settings\nTo add a fill, click on the Add Fill button. This will add a fill to the list. You can add as many fills as you want. See the Performance section for more information about the impact of adding fills.\n\nEach fill in the list is applied to objects that belong to the specified Rendering Layer Mask. See Rendering Layer Masks for more information about how the layer system works.\nThe fill settings apply to a specific fill.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationLayerThe rendering layer(s) which will get a fill rendered for them.See Rendering Layer Masks for more information.RenderFor which occlusion states to render the fill.See Occlusion States for more information.BlendHow to blend the fill with the rest of the scene.PatternThe fill pattern that is used.ColorThe color of the fill.TextureThe texture that is rendered as the fill.ScaleThe scale/tiling of the texture that is used.ChannelThe channel of the texture that is used.FrequencyThe frequency of the pattern.DensityThe density of the pattern.OffsetThe offset of the pattern.RotationThe rotation of the pattern.DirectionThe movement direction of the pattern.SpeedThe movement speed of the pattern.WidthThe width of the glow.SoftnessHow sharp the falloff of the glow is.PowerThe softness of the glow.\nFill Patterns\nThe Surface Fill effect supports 6 different types of patterns.\nSolid, Dots, Stripes, Checkerboard, Glow and Texture.\n \n \n \nCustom pattern texture\nBy using the Texture pattern option, you can render whatever pattern that you’d like. There is a Channel setting which allows you to select which channel of the texture should be used for the pattern.\n\n\n\n                  \n                  Tip! Free pattern pack \n                  \n                \n\nThe following free pattern pack by Kenney is a great source of various tiling patterns. Use the R channel to use the pattern as a surface fill.\n\n\nkenney.nl/assets/pattern-pack\nPattern movement\nMost of the patterns allow the movement to be controlled through the Direction and Speed settings. The Direction is a value in degrees between 0 and 360 where 0 is right, 90 is down, 180 is left, 270 is up and 360 is right again.\n\nLimitations\nThere are some known limitations that come with the implementation of the Surface Fill effect.\n\n\n                  \n                  Fill Count \n                  \n                \n\nYou can add a maximum of 8 fills.\n\n"},"outlines/wide-outline":{"title":"Wide Outline","links":["support/performance","concepts-explained/rendering-layer-masks","concepts-explained/occlusion-states","concepts-explained/outline-bleeding"],"tags":[],"content":"Wide Outline renders an outline by generating a signed distance field (SDF) for each object and then sampling it. This creates consistent outlines that smoothly follows the shape of an object.\n\n\n\n                  \n                  Advantages \n                  \n                \n\n\nSmooth and Wide Outlines: Good for rendering consistent, smooth, wide outlines. Ideal for selection effects.\nPerformant: Performant to render wide outlines.\nObject Exclusion: Easily select which specific objects should receive an outline.\nAdvanced Visuals: Advanced distance-based effects such as soft glows, multi-colour or animated outlines are possible.\n\n\n\n\n\n                  \n                  Disadvantages \n                  \n                \n\n\nInner Lines: No inner lines are rendered. Only outlines.\nMultiple Styles: All outlined objects in the scene will share the same thickness as well as some other settings.\n\n\n\nConfiguration\nThe Wide Outline Settings object contains the settings related to this outline effect. Here are all of the settings explained. In Unity, each setting also has a tooltip which shows more information.\nGeneral Settings\nThe general settings apply to the outline effect as a whole (with all sub-outlines included).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationStageControls when the render pass executes.Show In Scene ViewSets whether to render the pass in the scene view.Force Clear StencilForce clear the stencil buffer after the render pass.Should normally not be enabled, but can be used if you notice unexpected interactions between different effects.DebugWhich stage to render as a debug view.\nShared Outline Settings\nSome settings related to the visuals of the outline are shared between all outlines. This is because Wide Outline is a screen-space effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationWidthThe width of the outline.BlendHow to blend the outline with the rest of the scene.Custom Depth (Experimental)Use a custom depth buffer to determine the occlusion state of the outlined pixels.Occluded ColorThe color of the outline when it is occluded.\nOutline Settings\nTo add an outline, click on the Add Outline button. This will add an outline to the list. You can add as many outlines as you want. See the Performance section for more information about the impact of adding outlines.\n\nEach outline in the list is applied to objects that belong to the specified Rendering Layer Mask. See Rendering Layer Masks for more information about how the layer system works.\nThe outline settings apply to a specific outline.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettingDescriptionAdditional InformationLayerThe rendering layer(s) which will get an outline rendered for them.See Rendering Layer Masks for more information.RenderFor which occlusion states to render the outline.See Occlusion States for more information.ColorThe color of the outline.\nCustom Depth Buffer (experimental)\nThe Wide Outline effect provides the option to use a Custom Depth Buffer. The advantage is explained below.\nIn the default mode, you can set a different outline color to be used when the outline is occluded by having 1 outline render When Not Occluded and have another outline render When Occluded.\n\nThis results in the following effect where you see that some parts of the outline are occluded. One issue with this effect is that each pixel of the outline calculates it’s occlusion state based on whether the pixel closest to it that is part of the cone, is occluded or not. So not the actual occlusion of the outline pixel is taken into account.\n\nWhen enabling the Custom Depth option, you can set an Occluded Color property that decides the color of the outline when occluded. The Render options for each outline also disappear.\n\nWhen using the Custom Depth mode, you will see that the outline occlusion is more accurate.\n\nThe downside of this method is that you lose some control and also there might be some depth buffer related artifacts.\n\nLimitations\nThere are some known limitations that come with the implementation of the Wide Outline effect.\n\n\n                  \n                  Outline Bleeding \n                  \n                \n\nBecause the silhouette is dilated in screen-space, the outline will not always completely respect the configured Occlusion State. This is especially apparent for wide outlines.\nIn the example below, the outline is set to render When Not Occluded however the outline bleeds slightly over the other object in the scene.\n\nSee Outline Bleeding for ways to resolve this.\n\n\n\n\n                  \n                  Scale With Distance \n                  \n                \n\nUnlike the Fast Outline effect, the Wide Outline does not have a Scale With Distance mode. I am looking into adding this in a future update.\n\n"},"support/changelog":{"title":"Changelog","links":[],"tags":[],"content":"All notable changes to this package will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[1.2.5] - 2024-11-17\nAdded\n\nAdded BeforeRenderingTransparents as outline injection point\n\n[1.2.4] - 2024-11-13\nAdded\n\nAdded scale-with-resolution option for soft outline resulting in better performance at higher resolutions\n\nFixed\n\nFixed graphics format not being supported on Android\n\n[1.2.3] - 2024-11-09\nFixed\n\nFixed edge detection not rendering on Unity 6000.0.22f1 or newer and Unity 2022.3.49f1 or newer\n\n[1.2.2] - 2024-11-06\nFixed\n\nFixed masking not working for edge detection\nFixed potential UnassignedReferenceExceptions when outline/fill material was not assigned\nFixed package samples missing scripts and materials\n\nChanged\n\nChanged edge detection default background to clear instead of white\n\n[1.2.1] - 2024-11-03\nAdded\n\nAdded custom property drawer for rendering layer mask in Unity 2022\n\nFixed\n\nFixed Wide Outline not working with render scales different from 1\nFixed error when using compatibility check in a project using a 2D renderer\n\n[1.2.0] - 2024-10-25\nAdded\n\nAdded alpha cutout support for Wide Outline and Soft Outline\nAdded support for WebGL (except for Soft Outline)\nAdded support for iOS\nAdded the SetActive method for enabling/disabling outlines through code\n\nFixed\n\nFixed typos\n\n[1.1.1] - 2024-10-12\nFixed\n\nFixed a compilation error on older version of Unity 2022.3\n\n[1.1.0] - 2024-10-07\nAdded\n\nAdded support for Unity 2022.3\nAdded support for Unity 6 with compatibility mode enabled\nAdded (experimental) support for the DOTS Hybrid Renderer\nAdded new compatibility check window to see if Linework will work with your project\nAdded option to create outline settings directly from within the renderer feature UI\n\nFixed\n\nFixed various memory leaks and unnecessary memory allocations\n\nRemoved\n\nRemoved unused code\nRemoved old ‘About and Support’ window\n\n[1.0.0] - 2024-08-25\nAdded\n\nAdded the Fast Outline effect for rendering simple outlines using vertex extrusion\nAdded the Soft Outline effect for rendering soft and glowy outlines\nAdded the Wide Outline effect for rendering consistent and smooth outlines\nAdded the Edge Detection effect for rendering a full-screen outline effect that applies to the whole scene\nAdded the Surface Fill effect for rendering screen-space fill effects and patterns for rendering screen-space fill effects and patterns\n"},"support/compatibility":{"title":"Compatibility","links":["1-projects/linework/docs/support/troubleshooting-and-known-limitations","support/contact"],"tags":[],"content":"Check if Linework will work in your project.\n\n\n                  \n                  Compatibility \n                  \n                \n\nLinework is compatible with Unity 6 or Unity 2022.3 and the Universal Render Pipeline. Other combinations are not supported.\n\n\n\n\n                  \n                  Known Limitations \n                  \n                \n\nPlease check Troubleshooting and Known Limitations as well.\n\n\nUnity Versions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnity VersionURP VersionStatus617.0.0✅ supported2022.314.0.0✅ supported2022.2 and olderx.y.z❌ not supported\nRender Pipelines\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPipelineStatusBuilt-In (legacy)❌ not supportedLight-Weight (deprecated)❌ not supportedUniversal (URP)✅ supportedHigh-Definition (HDRP)❌ not supported\nRenderers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRendererStatusURP Universal Renderer✅ supportedURP 2D Renderer❌ not supported (support planned, see roadmap)DOTS Hybrid Renderer✅ supported\nPlatforms\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlatformStatusWindows✅ supportedmacOS✅ supportedLinux❔ not tested → likely to workWeb✅ supportediOS✅ supportedAndroid❔ not tested → likely to workConsoles❔ not tested → likely to workVR/AR❔ not tested → likely to have some (fixable) issuesApple Vision Pro❌ not supported\nGraphics APIs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraphics APIStatusDirect3D11✅ supportedDirect3D12❔ not testedMetal✅ supportedOpenGLCore❌ not supportedOpenGLES3❔ not testedVulkan✅ supported\nOther\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRendering PathStatusForward✅ supportedForward +✅ supportedDeferred❌ not supported\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor SpaceStatusLinear✅ supportedGamma❔ not tested\nOther Assets\nLinework should not run in any issues with other assets. If you encounter any issues, please see the Contact section to get in touch."},"support/contact":{"title":"Contact","links":[],"tags":[],"content":"How to get in touch.\nHi! I am Alexander, the developer of Linework.\nYou can reach me in the following ways:\nDiscord: discord.com/invite/cFfQGzQdPn (preferred)\nTwitter: @alexanderameye\nEmail: alexanderameye@gmail.com\nWebsite: ameye.dev"},"support/performance":{"title":"Performance","links":["1-projects/linework/docs/outlines/fast-outline","1-projects/linework/docs/outlines/soft-outline","1-projects/linework/docs/outlines/wide-outline","1-projects/linework/docs/outlines/edge-detection","1-projects/linework/docs/outlines/surface-fill"],"tags":[],"content":"Some best-practices and guidelines when it comes to performance.\n\n\n                  \n                  Tip! Use the Profiler and Frame Debugger\n                  \n                \n\nThe Profiler and Frame Debugger are invaluable tools to get an insight in the rendering process of your project. Each step of the outline/fill effect will be shown within the frame debugger so you can see what’s going on.\n\n\nSRP Batcher\nLinework makes uses the Unity 6 RenderGraph API and the SRP Batcher.\nThe SRP Batcher in Unity optimizes draw calls by batching GameObjects that share the same shader. Each outline effect leverages this by batching outlines of the same type and visual together.\nOutlines end up in a different batch if:\n\nthey are of a different type (different shader)\nthey have a different visual (same shader, different material)\n\n\n\n                  \n                  Why does a different outline visual break the batch? \n                  \n                \n\nAlthough the SRP Batcher could technically batch outlines with different visuals, the current URP Renderer Feature API doesn’t support it. This is an area under investigation.\n\n\nTo maximize performance for a specific outline type, minimize the number of different outline visuals.\nFast Outline\nFast Outline is among the cheapest of the outline effects. It renders outlines by rendering an extruded version of an object behind the original object.\nSoft Outline\nSee Soft Outline for more information.\nWide Outline\nSee Wide Outline for more information.\nFlood iterations\nThe wider the outline, the more flood iterations need to happen, the slower this effect is. However, this technique is still very performant for rendering wide outlines.\nEdge Detection\nEdge Detection\nSurface Fill\nSurface Fill\nMobile Performance Tests\nPerformance tests were done on a base model iPhone 15.\nSkinned Mesh Renderers\nThis scene consists of 50 animated skinned mesh renderers, with each time 4 types of outlines/fills applied.\nScreenshots are shown in the following order: surface fill, fast outline, soft outline, wide outline.\n\n\n\n\n400 Outlines\nThis scene consists of 400 meshes, with each time 4 types of outlines/fills applied.\nScreenshots are shown in the following order: surface fill, fast outline, soft outline, wide outline.\n\n\n\n\n900 Outlines\nThis scene consists of 900 meshes, with each time 4 types of outlines/fills applied.\nScreenshots are shown in the following order: surface fill, fast outline, soft outline, wide outline.\n\n\n\n"},"support/roadmap":{"title":"Roadmap","links":["support/contact","1-projects/linework/docs/outlines/fast-outline","1-projects/linework/docs/outlines/soft-outline","1-projects/linework/docs/outlines/wide-outline","1-projects/linework/docs/outlines/edge-detection","1-projects/linework/docs/outlines/surface-fill"],"tags":[],"content":"An overview of the features I’m currently working on. If you have any feature requests, feel free to reach out through the Discord and add the feature to the feature-requests channel (see Contact). I’m always open to suggestions.\nReleased\nFeatures/fixes that have been released order chronologically.\nSee the Discord discord.com/invite/cFfQGzQdPn for additional planned features.\n\n\n                  \n                  Todo\n                  \n                \n\n\nAdded smooth normals baking tool\nAdded depth fade option for edge detection\nImproved masking options for edge detection\n\n\n\n\n\n                  \n                  1.2.x \n                  \n                \n\n\nAdded alpha cutout support\nAdded WebGL support\nAdded iOS support\nAdded Android support\nAdded render scale support\nAdded option to scale outline width with resolution\n\n\n\n\n\n                  \n                  1.1.x \n                  \n                \n\n\nAdded support for Unity 2022.3\nAdded support for Unity 6 with compatibility mode enabled\nAdded (experimental) support for the DOTS Hybrid Renderer\nAdded new compatibility check window\nAdded option to create outline settings directly from within the renderer feature UI\nFixed various memory leaks and unnecessary memory allocations\n\n\n\n\n\n                  \n                  1.0.0 \n                  \n                \n\nThe initial version of Linework. Contains the following features\n\nFast Outline\nSoft Outline\nWide Outline\nEdge Detection\nSurface Fill\n\nEach effect has an extensive range of settings such as which objects the outline is applied to, the visuals of the outline and the behavior of the outline.\n\n\nBacklog\nThis asset is in active development. See the Discord’s feature-requests channel for a backlog of planned features."},"support/troubleshooting-and-known-limitations":{"title":"Troubleshooting and Known Limitations","links":["support/contact","support/roadmap","support/compatibility"],"tags":[],"content":"Some frequently encountered issues and how to resolve them.\nCan’t find a solution to your issue here? Contact me.\nKnown Issues\nSee the Discord discord.com/invite/cFfQGzQdPn for additional information.\n\n\n                  \n                  WebGL \n                  \n                \n\nWebGL is only supported for Wide Outline, Surface Fill, Edge Detection and Fast Outline. Soft Outline is not supported at this moment.\n\n\n\n\n                  \n                  Alpha Cutout \n                  \n                \n\nAlpha cutout currently only works for Wide Outline and Soft Outline. Support for Fast Outline and Surface Fill is under investigation.\n\n\n\n\n                  \n                  MSAA \n                  \n                \n\nHaving Anti Aliasing (MSAA) enabled in the Universal Render Pipeline Asset can result in an error and some of the outlines will not render.\nThis will be fixed in a future update.\n\n\n\n\n\n                  \n                  VR support \n                  \n                \n\nVR is not currently supported but support will be added soon. See the Roadmap.\n\n\n\n\n                  \n                  2D/Sprite support \n                  \n                \n\nSprites and/or the URP 2D renderer are not currently supported but I’m looking into adding support. See the Roadmap.\n\n\nKnown Limitations (by design)\n\n\n                  \n                  Temporal Anti-aliasing (TAA) \n                  \n                \n\nIf the outline is set to render After Post Processing, the outline will jitter more than the rest of the scene.\n\n\n\n\n                  \n                  Volume System \n                  \n                \n\nThis asset has not been designed to work together with the URP Volume System.\n\n\n\n\n                  \n                  Deferred Rendering \n                  \n                \n\nLinework is not known to be compatible with the deferred rendering mode.\n\n\n\n\n                  \n                  Particles and transparent objects \n                  \n                \n\nAdding outlines to particles or other transparent objects is not supported.\n\n\nCompatibility\nSee Compatibility for more information.\nGeneral\n\n\n                  \n                  Outline/fill does not behave as expected \n                  \n                \n\nWhen combining multiple types of outline effects or fills, it could sometimes be that their stencil masks interact with each other. Enable the Force Clear Stencil toggle in the settings to see if this resolves the issue. If you encounter an issue like this, please Contact me since I treat it as a bug.\n\n\n\n\n                  \n                  Outline/fill has influence on other rendering effects \n                  \n                \n\nPlease Contact me.\n\n"},"index":{"title":"index","links":["getting-started","common-questions","support/roadmap","support/troubleshooting-and-known-limitations"],"tags":[],"content":"Thank you for your interest in Linework!\nYou have already downloaded Linework and want to get started? Read the Getting Started section.\nYou can get Linework from the asset store here\nassetstore.unity.com/packages/slug/294140.\n\n\n\n                  \n                  Linework for Unity - A Practical Toolkit for Rendering Outlines \n                  \n                \n\nWith Linework you can render high-quality outlines in Unity. Multiple techniques can be used, balancing visual quality and performance. Both full-screen outlines (for outlined art-styles) as per-object outlines are supported. You can also combine outlines with fill effects such as patterns and overlays. The toolkit is designed to be feature-rich and straightforward to use.\n\n\nUseful Links\nAsset Store: assetstore.unity.com/packages/slug/294140\nDiscord: discord.gg/cFfQGzQdPn\nGetting Started | Common Questions | Roadmap | Troubleshooting and Known Limitations"}}